<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用C#开发WebService接口</title>
    <url>/2017/11/05/%E4%BD%BF%E7%94%A8C-%E5%BC%80%E5%8F%91WebService%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>由于工作需求，不得已要做一些业务接口，使用C#语言和Visual Studio2010开发完成。一开始真的完全不懂如何下手，慢慢的从网上查找一些这方面的资料，一步步地到现在可以自己独立完成接口的开发，其中也是经历了挺多挫折的。现在希望能够分享一下这方面的东西，也是为以后做个笔记吧。</p>
<span id="more"></span>
<h3 id="Step1-创建WebService项目"><a href="#Step1-创建WebService项目" class="headerlink" title="Step1.创建WebService项目"></a>Step1.创建WebService项目</h3><p><strong>1.</strong> 首先我们打开Visual Studio2010开发工具，点击导航栏—文件—新建项目，选择Visual C#–Web，选择ASP.NET空Web应用程序，项目名称可以随意定，点击确定。</p>
<p><strong>2.</strong> 打开解决方案管理器，找到我们刚才创建的那个项目，右键—添加新建项，选择Web服务，名称也是由自己定，确定后就完成了项目的创建。</p>
<h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><p>我们双击打开后缀名为.asmx的文件，看到如下代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Services;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WebApplication2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> WebService1 的摘要说明</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">WebService(Namespace = <span class="string">&quot;http://tempuri.org/&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)</span>]</span><br><span class="line">    [<span class="meta">System.ComponentModel.ToolboxItem(false)</span>]</span><br><span class="line">    <span class="comment">// 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。</span></span><br><span class="line">    <span class="comment">// [System.Web.Script.Services.ScriptService]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WebService1</span> : <span class="title">System.Web.Services.WebService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">WebMethod</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HelloWorld</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是开发工具自动帮我们生成的初始代码的demo，我们主要关注的是HelloWord这个方法，如果一个方法上面带有[WebMethod]，则说明此方法是对外公开，可供外部调用的，说白了，这就是我们的接口，如果我们想对该方面写注释要怎么做呢？只需要把[WebMethod]改为[WebMethod(Description&#x3D;”这是外部调用的接口”)]，这样里面的中文说明在我们启动项目的时候就可以看到了。</p>
<h3 id="Step2-项目代码的结构"><a href="#Step2-项目代码的结构" class="headerlink" title="Step2.项目代码的结构"></a>Step2.项目代码的结构</h3><p>上面我们已经创建好了项目，下面根据业务开始设计代码的结构，一个好的结构可以让我们更好地维护项目。现在以最近做的一个项目为例子，只是我自己设计的，可以根据自己的实际情况设计结构，接口的传入数据、返回数据都为xml格式。</p>
<p>我先讲解我的接口业务，涉及到查询数据、新增记录等，例如我们常见的 <strong>挂号</strong>，我就以挂号接口作为一个例子讲解实际业务。外部调用接口，传入必需的挂号相关信息，如订单号、号别、时段、挂号人信息、支付金额等，而我们的接口需要将这些传入的数据作为依据，查找是否存在对应的号源，如果信息无误，则完成挂号的操作，并且返回相应的订单信息给接口调用者。</p>
<p>那么我们确定好接口的传入参数是xml格式的字符串，返回的数据也是xml格式的字符串，如果要对这些数据进行操作，最好的办法就是把xml格式的字符串转化为类，使用一个泛型类将其序列化类，确定好数据的处理，下面我们开始设计结构。</p>
<p>下面是我设计的代码结构：</p>
<p>TJYD.Helper ——–存放工具类，例如我们刚才提到的序列化类</p>
<p>application ——–创建的项目</p>
<p>appliaction.Business   ——-数据处理类，主要完成入参和出参的数据处理</p>
<p>application.Business.DAL  ——-Model层，负责跟数据库交互</p>
<p>application.Business.Request  ——–请求入参处理类</p>
<p>application.Business.Response  ———返回数据处理类</p>
<h3 id="Step3-代码实例"><a href="#Step3-代码实例" class="headerlink" title="Step3.代码实例"></a>Step3.代码实例</h3><p>我们以一个实例来解释代码逻辑处理的过程。</p>
<h4 id="1-接口代码"><a href="#1-接口代码" class="headerlink" title="1.接口代码"></a>1.接口代码</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">WebMethod(Description = <span class="string">&quot;号源信息查询&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">getRegInfo</span>(<span class="params"><span class="built_in">string</span> xml</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> response = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    Business.Clinic.clinicBusiness.getClinicSource(xml,<span class="keyword">ref</span> response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注释：ref是对实例的引用，类似指针的作用。</p>
<h4 id="1-数据处理类"><a href="#1-数据处理类" class="headerlink" title="1.数据处理类"></a>1.数据处理类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #region [ 号源信息 ]</span><br><span class="line">public static void getClinicSource(string requestXml, ref string response)</span><br><span class="line">&#123;</span><br><span class="line">    XmlHelper&lt;Request.Clinic.getClinicSourceRequest&gt; requestHelper = new XmlHelper&lt;Request.Clinic.getClinicSourceRequest&gt;();</span><br><span class="line">    XmlHelper&lt;Response.Clinic.getClinicSourceResponse&gt; responseHelper = new XmlHelper&lt;Response.Clinic.getClinicSourceResponse&gt;();</span><br><span class="line"></span><br><span class="line">    Response.Clinic.getClinicSourceResponse br = new Response.Clinic.getClinicSourceResponse();</span><br><span class="line">    br.clinicSourceResult = new Response.Clinic.clinicSourceResult();</span><br><span class="line">    br.clinicSourceResult.clinicSourceCollection = new List&lt;Response.Clinic.clinicSourceCollection&gt;();</span><br><span class="line"></span><br><span class="line">    //每天号源</span><br><span class="line">    Dictionary&lt;string, List&lt;YY_SG_WebService.Business.Response.Clinic.clinicSourceItem&gt;&gt; scheduleDateDic = new Dictionary&lt;string, List&lt;Response.Clinic.clinicSourceItem&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    var request = requestHelper.Deserialize(requestXml);</span><br><span class="line">    if (request != null)</span><br><span class="line">    &#123;</span><br><span class="line">        BLL.Clinic.clinicBLL bll = new BLL.Clinic.clinicBLL();</span><br><span class="line">        bool isError = false;</span><br><span class="line">        string ErrorMessage = &quot;&quot;;</span><br><span class="line">        string resultCode = &quot;&quot;;</span><br><span class="line">        var ds = bll.getClinicSource(request.clinicSource.branchCode, request.clinicSource.beginDate, request.clinicSource.endDate, request.clinicSource.deptCode, request.clinicSource.doctorCode, ref isError, ref ErrorMessage,ref resultCode);</span><br><span class="line">        bool isData = true;</span><br><span class="line">        //判断是否返回数据</span><br><span class="line">        if (ds.Tables[0].Columns.Contains(&quot;resultMessage&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            isData = false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (ds.Tables.Count &gt; 0 &amp;&amp; isData)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i = 0; i &lt; ds.Tables[0].Rows.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var dr = ds.Tables[0].Rows[i];</span><br><span class="line">                var date = dr[&quot;scheduleDates&quot;].ToString();</span><br><span class="line">                YY_SG_WebService.Business.Response.Clinic.clinicSourceItem item = null;</span><br><span class="line"></span><br><span class="line">                if (scheduleDateDic.ContainsKey(date))</span><br><span class="line">                &#123;</span><br><span class="line">                    //在字典里面查找号源</span><br><span class="line">                    item = scheduleDateDic[date].FirstOrDefault(d =&gt; d.doctorNo == dr[&quot;doctorNo&quot;].ToString());</span><br><span class="line">                    if (item == null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        item = new Response.Clinic.clinicSourceItem();</span><br><span class="line">                        item.category = dr[&quot;category&quot;].ToString();</span><br><span class="line">                        item.deptCode = dr[&quot;deptCode&quot;].ToString();</span><br><span class="line">                        item.deptName = dr[&quot;deptName&quot;].ToString();</span><br><span class="line">                        item.doctorCode = dr[&quot;doctorNo&quot;].ToString();</span><br><span class="line">                        item.doctorNo = dr[&quot;doctorNo&quot;].ToString();</span><br><span class="line">                        item.doctorName = dr[&quot;doctorName&quot;].ToString();</span><br><span class="line">                        item.doctorSex = dr[&quot;doctorSex&quot;].ToString();</span><br><span class="line">                        item.doctorTelephone = dr[&quot;doctorTelephone&quot;].ToString();</span><br><span class="line">                        item.doctorSkill = dr[&quot;doctorSkill&quot;].ToString();</span><br><span class="line">                        item.doctorIntroduction = dr[&quot;doctorIntroduction&quot;].ToString();</span><br><span class="line">                        item.doctorTitle = dr[&quot;doctorTitle&quot;].ToString();</span><br><span class="line">                        item.picture = dr[&quot;picture&quot;].ToString();</span><br><span class="line">                        item.leftTotalNum = dr[&quot;leftTotalNum&quot;].ToString();</span><br><span class="line">                        item.clinicSourceDetail = new List&lt;Response.Clinic.clinicSourceDetail&gt;();</span><br><span class="line">                        scheduleDateDic[date].Add(item);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    item = new Response.Clinic.clinicSourceItem();</span><br><span class="line">                    item.category = dr[&quot;category&quot;].ToString();</span><br><span class="line">                    item.deptCode = dr[&quot;deptCode&quot;].ToString();</span><br><span class="line">                    item.deptName = dr[&quot;deptName&quot;].ToString();</span><br><span class="line">                    item.doctorCode = dr[&quot;doctorNo&quot;].ToString();</span><br><span class="line">                    item.doctorNo = dr[&quot;doctorNo&quot;].ToString();</span><br><span class="line">                    item.doctorName = dr[&quot;doctorName&quot;].ToString();</span><br><span class="line">                    item.doctorSex = dr[&quot;doctorSex&quot;].ToString();</span><br><span class="line">                    item.doctorTelephone = dr[&quot;doctorTelephone&quot;].ToString();</span><br><span class="line">                    item.doctorSkill = dr[&quot;doctorSkill&quot;].ToString();</span><br><span class="line">                    item.doctorIntroduction = dr[&quot;doctorIntroduction&quot;].ToString();</span><br><span class="line">                    item.doctorTitle = dr[&quot;doctorTitle&quot;].ToString();</span><br><span class="line">                    item.picture = dr[&quot;picture&quot;].ToString();</span><br><span class="line">                    item.leftTotalNum = dr[&quot;leftTotalNum&quot;].ToString();</span><br><span class="line"></span><br><span class="line">                    item.clinicSourceDetail = new List&lt;Response.Clinic.clinicSourceDetail&gt;();</span><br><span class="line"></span><br><span class="line">                    scheduleDateDic.Add(date, new List&lt;Response.Clinic.clinicSourceItem&gt; &#123; item &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                var detail = item.clinicSourceDetail.FirstOrDefault(d =&gt; d.timeFlag == dr[&quot;timeFlags&quot;].ToString());</span><br><span class="line">                //时间段不存在,添加时间段</span><br><span class="line">                if (detail == null)</span><br><span class="line">                &#123;</span><br><span class="line">                    detail = new Response.Clinic.clinicSourceDetail();                          </span><br><span class="line">                    detail.timeFlag = dr[&quot;timeFlags&quot;].ToString();         </span><br><span class="line">                    detail.hasDetailTime = &quot;1&quot;;</span><br><span class="line">                    detail.beginTime = dr[&quot;beginTime&quot;].ToString();</span><br><span class="line">                    detail.endTime = dr[&quot;endTime&quot;].ToString();</span><br><span class="line">                    detail.workStatus = &quot;1&quot;;</span><br><span class="line">                    detail.totalNum = dr[&quot;totalNum&quot;].ToString();</span><br><span class="line">                    detail.leftNum = dr[&quot;leftTotalNum&quot;].ToString();</span><br><span class="line">                    detail.regFee = dr[&quot;regFee&quot;].ToString();</span><br><span class="line">                    detail.treatFee = dr[&quot;treatFee&quot;].ToString();</span><br><span class="line">                    detail.workId = &quot;&quot;;</span><br><span class="line">                    item.clinicSourceDetail.Add(detail);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            foreach (var date in scheduleDateDic.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                Response.Clinic.clinicSourceCollection item = new Response.Clinic.clinicSourceCollection();</span><br><span class="line">                item.scheduleDate = date;</span><br><span class="line">                item.clinicSourceItem = scheduleDateDic[date];</span><br><span class="line"></span><br><span class="line">                br.clinicSourceResult.clinicSourceCollection.Add(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            br.resultCode = resultCode;</span><br><span class="line">            br.resultMessage =ds.Tables[0].Rows[0][&quot;resultMessage&quot;].ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        br.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        br.resultCode = &quot;-1&quot;;</span><br><span class="line">        br.resultMessage = &quot;传入参数不正确或者为空&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    response = responseHelper.Serialize(br);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面最开始我们用到了泛型类，生成了两个实例类，这两个类是根据入参出参构造出来的。</p>
<h5 id="入参类"><a href="#入参类" class="headerlink" title="入参类"></a>入参类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Xml.Serialization;</span><br><span class="line">namespace YY_SG_WebService.Business.Request.Clinic</span><br><span class="line">&#123;</span><br><span class="line">    [XmlRoot(ElementName = &quot;request&quot;)]</span><br><span class="line">    [Serializable]</span><br><span class="line">    public class getClinicSourceRequest : BaseRequest</span><br><span class="line">    &#123;</span><br><span class="line">        [XmlElement(&quot;params&quot;)]</span><br><span class="line">        public clinicSource clinicSource &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public class clinicSource</span><br><span class="line">    &#123;</span><br><span class="line">        public string branchCode &#123; get; set; &#125;</span><br><span class="line">        public string beginDate &#123; get; set; &#125;</span><br><span class="line">        public string endDate &#123; get; set; &#125;</span><br><span class="line">        public string deptCode &#123; get; set; &#125;</span><br><span class="line">        public string doctorCode &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="出参类"><a href="#出参类" class="headerlink" title="出参类"></a>出参类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Xml.Serialization;</span><br><span class="line">namespace YY_SG_WebService.Business.Response.Clinic</span><br><span class="line">&#123;</span><br><span class="line">    [XmlRoot(ElementName = &quot;response&quot;)]</span><br><span class="line">    [Serializable]</span><br><span class="line">    public class getClinicSourceResponse:BaseResponse</span><br><span class="line">    &#123;</span><br><span class="line">        [XmlElement(&quot;result&quot;)]</span><br><span class="line">        public clinicSourceResult clinicSourceResult &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public class clinicSourceResult</span><br><span class="line">    &#123;</span><br><span class="line">        [XmlElement(&quot;collection&quot;)]</span><br><span class="line">        public List&lt;clinicSourceCollection&gt; clinicSourceCollection &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public class clinicSourceCollection</span><br><span class="line">    &#123;</span><br><span class="line">        public string  scheduleDate &#123; get; set; &#125;</span><br><span class="line">        [XmlElement(&quot;item&quot;)]</span><br><span class="line">        public List&lt;clinicSourceItem&gt; clinicSourceItem &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public class clinicSourceItem</span><br><span class="line">    &#123;</span><br><span class="line">        public string category &#123; get; set; &#125;</span><br><span class="line">        public string deptCode &#123; get; set; &#125;</span><br><span class="line">        public string deptName &#123; get; set; &#125;</span><br><span class="line">        public string doctorCode &#123; get; set; &#125;</span><br><span class="line">        public string doctorNo &#123; get; set; &#125;</span><br><span class="line">        public string doctorName &#123; get; set; &#125;</span><br><span class="line">        public string doctorSex &#123; get; set; &#125;</span><br><span class="line">        public string doctorTelephone &#123; get; set; &#125;</span><br><span class="line">        public string doctorSkill &#123; get; set; &#125;</span><br><span class="line">        public string doctorIntroduction &#123; get; set; &#125;</span><br><span class="line">        public string doctorTitle &#123; get; set; &#125;</span><br><span class="line">        public string picture &#123; get; set; &#125;</span><br><span class="line">        public string leftTotalNum &#123; get; set; &#125;</span><br><span class="line">        [XmlElement(&quot;detail&quot;)]</span><br><span class="line">        public List&lt;clinicSourceDetail&gt; clinicSourceDetail &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public class clinicSourceDetail</span><br><span class="line">    &#123;</span><br><span class="line">        public string timeFlag &#123; get; set; &#125;</span><br><span class="line">        public string hasDetailTime &#123; get; set; &#125;</span><br><span class="line">        public string  beginTime &#123; get; set; &#125;</span><br><span class="line">        public string endTime &#123; get; set; &#125;</span><br><span class="line">        public string workStatus &#123; get; set; &#125;</span><br><span class="line">        public string totalNum &#123; get; set; &#125;</span><br><span class="line">        public string leftNum &#123; get; set; &#125;</span><br><span class="line">        public string regFee &#123; get; set; &#125;</span><br><span class="line">        public string treatFee &#123; get; set; &#125;</span><br><span class="line">        public string workId &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是我实际的业务构造的类，比较复杂，看实际情况构造，这里涉及到了C#的xml相关知识，具体可百度了解。</p>
<p>我们看到上面的数据处理类，关注的重点是 **bll.getClinicSource()**方法，由这个方法调用我们跟数据库交互的方法，然后返回DataSet（该数据为接口返回的业务数据），后面是对返回的业务数据根据约定的格式进行处理封装，responseHelper.Serialize这个方法是将返回业务数据类反序列化为xml格式字符串。其中由于返回的数据格式较为复杂，有四个层级，使用了Dictionary进行存储分类，再赋值给实例类。</p>
<h4 id="数据库交互类"><a href="#数据库交互类" class="headerlink" title="数据库交互类"></a>数据库交互类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public DataSet getClinicSource(string branchCode, string  beginDate, string  endDate, string deptCode, string doctorCode, ref bool isError, ref string ErrorMessage,ref string resultCode)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;OracleParameter&gt; paramList = new List&lt;OracleParameter&gt;();</span><br><span class="line">            paramList.Add(DBHelper.createParameter(&quot;branchCode&quot;, 30, ParameterDirection.Input, branchCode));</span><br><span class="line">            paramList.Add(DBHelper.createParameter(&quot;beginDate&quot;, 30, ParameterDirection.Input, beginDate));</span><br><span class="line">            paramList.Add(DBHelper.createParameter(&quot;endDate&quot;, 30, ParameterDirection.Input, endDate));</span><br><span class="line">            paramList.Add(DBHelper.createParameter(&quot;deptCode&quot;, 30, ParameterDirection.Input,deptCode));</span><br><span class="line">            paramList.Add(DBHelper.createParameter(&quot;doctorCode&quot;, 30, ParameterDirection.Input, doctorCode));</span><br><span class="line">            paramList.Add(DBHelper.createParameter(&quot;curout&quot;, ParameterDirection.Output, OracleType.Cursor));</span><br><span class="line">            paramList.AddRange(DBHelper.CreateBaseParameter());</span><br><span class="line">            OracleParameter[] pm = paramList.ToArray();</span><br><span class="line">            DataSet ds = new DataSet();</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                ds = DBHelper.runProc_Ret_DataSet(&quot;proc_clinic_Info&quot;, ref pm);</span><br><span class="line">                foreach (var op in pm)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (op.ParameterName == &quot;resultMessage&quot;)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ErrorMessage = op.Value.ToString();</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (op.ParameterName == &quot;resultCode&quot;)</span><br><span class="line">                    &#123;</span><br><span class="line">                        resultCode = op.Value.ToString();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                isError = false;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                isError = true;</span><br><span class="line">                ErrorMessage = e.Message;</span><br><span class="line">                TJYD.Helper.Logger.Write(&quot;proc_clinic_Info,&quot; + e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            return ds;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p> <strong>DBHelper.runProc_Ret_DataSet</strong>该方法是调用数据库的存储过程，第一个参数是存储过程名称，第二个是存储过程入参，返回DataSet。</p>
<p><strong>思绪有点凌乱，先写到这吧，有些东西想说清楚，但是又没法整理好逻辑关系，头疼（—）</strong></p>
]]></content>
      <categories>
        <category>webService</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库用户密码MD5加密</title>
    <url>/2018/02/01/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81MD5%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>有时候我们会把系统用户的用户名和密码存在在数据库的表中，如果密码以明文方式存储会存在一定的风险性，所以就想着如何能够通过一种加密方式对用户的密码进行加密，保障用户信息的安全性。</p>
<span id="more"></span>
<pre><code>下面是本人推荐的一种主流密码加密算法，MD5（Message Digest Algorithm），中文名为消息摘要算法，它是计算机广泛使用的哈希算法之一，能够将数据（如汉字）运算为另一固定长度的值。
</code></pre>
<p>MD5算法具有以下的特点：</p>
<ul>
<li>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</li>
<li>容易计算：从原数据计算出MD5值很容易。</li>
<li>抗修改性:对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li>
<li>强抗碰撞:已知原数据和其MD5值，想找到一个具有相同MD5值的数据(即伪造数据)是非常困难的。<br>既然我们有这么强大的算法，那么怎么样把它应用到我们Oralce数据库当中去呢？</li>
</ul>
<h4 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h4><p>新建一个函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION MD5(</span><br><span class="line"></span><br><span class="line">passwd IN VARCHAR2)</span><br><span class="line"></span><br><span class="line">RETURN VARCHAR2</span><br><span class="line"></span><br><span class="line">IS</span><br><span class="line"></span><br><span class="line">retval varchar2(32);</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">retval := utl_raw.cast_to_raw(DBMS_OBFUSCATION_TOOLKIT.MD5(INPUT_STRING =&gt; passwd)) ;</span><br><span class="line"></span><br><span class="line">RETURN LOWER(retval);--大小写转换</span><br><span class="line"></span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h4 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h4><p>调用该函数对password进行加密：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select md5(&#x27;123&amp;%￥#;,.&#x27;) from dual;</span><br></pre></td></tr></table></figure>
<p>执行上面查询语句就对我们的密码进行了加密，然后生成了32位的加密密文，经本人测试，如果是简单的123类型的数字，也是很容易在网上的MD5在线解密工具破解的；如果是复杂的密文加密出来的密文是没那么容易被破解的；所以以后设置密码一定要注意不要太简单了，不然再高深的加密算法也是能够被破解获知的。</p>
]]></content>
      <categories>
        <category>数据库安全</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle定时任务</title>
    <url>/2017/10/24/Oracle%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>最近遇到一个很头疼的需求，需要每天间隔更新数据的打印状态，最开始实在是想不到什么办法，只能想着用程序实现定时更新了，后来才发现使用oracle自带的job能够实现oracle定制定时执行任务，真的挺方便的，一下子就解决了我的问题，希望能分享出来给大家，也许以后说不定用的上呢。</p>
<span id="more"></span>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先我们先把需要执行的更新语句放到存储过程中，然后在固定的时间去执行这个存储过程就OK了。</p>
<p><strong>注意</strong>：以下的操作是使用PL&#x2F;SQL客户端实现的。</p>
<h5 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h5><p>新建一个存储过程，我们暂时命名为test_proc，存储过程的语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create or replace procedure test_proc IS</span><br><span class="line">BEGIN</span><br><span class="line">    UPDATE ORDERS SET DRUG_INDICATOR=&#x27;0&#x27; WHERE STOP_DATE_TIME IS NULL;</span><br><span class="line">    COMMIT;</span><br><span class="line">    EXCEPTION</span><br><span class="line">    WHEN OTHERS THEN</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(&#x27;Exception happened,data was rollback&#x27;);</span><br><span class="line">    ROLLBACK;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<p>在SQL Window窗体执行存储过程创建语句后，查看Object下的Prodecures菜单，可以看到新建的存储过程，检查存储过程创建是否有红色的标记，如无，则表示存储过程正常。</p>
<h5 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h5><p>检查Oracle的JOB运行环境，打开PL&#x2F;SQL的命令窗口，执行以下语句查看数据库的进程数量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW PARAMETER job_queue_processes;</span><br></pre></td></tr></table></figure>
<p>如果进程数为0的话，则按照以下语句修改，不为就根据需要决定是否要修改。</p>
<p>在PL&#x2F;SQL的command窗口输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter system set job_queue_processes=10 scope=both;</span><br></pre></td></tr></table></figure>

<h5 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h5><p>下面我们开始定时定制执行任务。<br>在PL&#x2F;SQL的command窗口输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL&gt;var job_numb number;</span><br><span class="line">SQL&gt;begin</span><br><span class="line">2   dbms_job.submit(:job_num,&#x27;test_proc;&#x27;,sysdate,&#x27;trunc(sysdate+1)&#x27;);</span><br><span class="line">3   end;</span><br><span class="line">4   /</span><br></pre></td></tr></table></figure>
<p>执行成功后，记得点击PL&#x2F;SQL的提交按钮。<br>trunc(sysdate+1)是指定数据库每天0点执行我们设定的存储过程，后面再详细讲解submit的参数。</p>
<h5 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h5><p>任务已经开始执行了，我们可以用以下语句找到我们刚才创建的任务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from dba_jobs;</span><br></pre></td></tr></table></figure>
<h5 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h5><p>其他说明：<br>(1)如何删除一个JOB呢？<br>在PL&#x2F;sql的command window 执行以下语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec dbms_job.remove(81);</span><br></pre></td></tr></table></figure>
<p>这里的‘81’对应的是我们刚才查找的表dba_jobs当中要删除对应行记录的JOB值。</p>
<h4 id="submit的各个参数"><a href="#submit的各个参数" class="headerlink" title="submit的各个参数"></a>submit的各个参数</h4><p>submit实际上是一个存储过程，有五个参数：job、what、next_date、interval与no_parse。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PROCEDURE Submit ( job OUT binary_ineger, </span><br><span class="line">What IN varchar2, </span><br><span class="line">next_date IN date, </span><br><span class="line">interval IN varchar2, </span><br><span class="line">no_parse IN booean:=FALSE) </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>job参数是由Submit()过程返回的binary_ineger。这个值用来唯一标识一个工作。</p>
<p>前面有一个双引号，在SQL windwo中没有显示，拷贝到command窗口就可以显示出来了；</p>
<p>what参数是将被执行的PL&#x2F;SQL代码块。这里是存储过程的名称，后面有一个英文状态下的分号不能掉了；</p>
<p>next_date参数指识何时将运行这个工作。</p>
<p>interval参数何时这个工作将被重执行。</p>
<p>这里加号、括号都必须在英文状态下输入；</p>
<p>no_parse参数指示此工作在提交时或执行时是否应进行语法分析——TRUE 指示此PL&#x2F;SQL代码在它第一次执行时应进行语法分析， 而FALSE指示本PL&#x2F;SQL代码应立即进行语法分析。</p>
]]></content>
      <categories>
        <category>定时任务</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>it is time to change</title>
    <url>/2019/04/09/%E9%9A%8F%E6%83%B3%E4%B8%8E%E7%BE%81%E7%BB%8A/</url>
    <content><![CDATA[<p>今天偶然间点开了一个老同学的博客，回想起自己的也已尘封了半年许久，一直想写一点东西，作为纪念过去的时光记忆。也许大家会认为，这种博客估计只有所谓神秘的程序猿才会做的出来，但是坦率地说，我感觉自己活得不像是个程序猿，没有那么痴迷IT技术，当工作需要的时候才会去粗略地学习下。</p>
<span id="more"></span>

<p>You still have lots more to work on! </p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>感想</tag>
      </tags>
  </entry>
</search>
